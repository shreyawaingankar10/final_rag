{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shreya\\\\rag\\\\rag2\\\\src\\\\components\\\\DataCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./DataCollection.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GEMINI_API_KEY = \"AIzaSyCgz-p2aVMhAfPapKiuqpPk5fSU1mczYgI\";\nconst DataCollection = () => {\n  _s();\n  const [sources, setSources] = useState([\"\"]);\n  const [analysis, setAnalysis] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleInputChange = (index, value) => {\n    const updatedSources = [...sources];\n    updatedSources[index] = value;\n    setSources(updatedSources);\n  };\n  const addSource = () => {\n    setSources([...sources, \"\"]);\n  };\n  const extractMainArticle = async url => {\n    const response = await fetch(url);\n    const html = await response.text();\n    const tempDiv = document.createElement(\"div\");\n    tempDiv.innerHTML = html;\n    const article = tempDiv.querySelector(\"article\") || tempDiv.querySelector('[class*=\"article\"]') || tempDiv.querySelector('[class*=\"content\"]');\n    const rawText = article ? article.innerText : tempDiv.innerText;\n    const cleanText = rawText.split(\"\\n\").filter(line => line.trim().length > 40 && !line.toLowerCase().includes(\"related articles\") && !line.toLowerCase().includes(\"also read\")).join(\"\\n\");\n    return cleanText.slice(0, 7000);\n  };\n  const summarizeWithGemini = async text => {\n    var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n    const prompt = `\nYou are a professional news risk analyst. Given the following news article, generate a structured report with:\n\n- Headline (short title)\n- Professional Summary (3-5 lines)\n- Authenticity Level (Low, Medium, High)\n- Urgency Level (Low, Medium, High)\n- Impact Scope (e.g., local, state, national, international)\n- Recommendation (action if any)\n\nNews Article:\n\"\"\"${text}\"\"\"\n`;\n    const res = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      })\n    });\n    const data = await res.json();\n    return ((_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"No response\";\n  };\n  const handleSelect = async index => {\n    const selectedUrl = sources[index];\n    if (!selectedUrl.startsWith(\"https://\")) {\n      alert(\"Please enter a valid URL!\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const articleText = await extractMainArticle(selectedUrl);\n      const result = await summarizeWithGemini(articleText);\n      setAnalysis(result);\n    } catch (error) {\n      alert(\"Error during analysis: \" + error.message);\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-collection\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Early-Warning AI Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sources-container\",\n      children: [sources.map((source, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"source-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: source,\n          onChange: e => handleInputChange(index, e.target.value),\n          placeholder: `Enter News URL ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"select-button\",\n          onClick: () => handleSelect(index),\n          children: \"Analyze\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-source\",\n        onClick: addSource,\n        children: \"+ Add New Source\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: \"Analyzing with Gemini AI...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }, this), analysis && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analysis-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCCA Gemini Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          whiteSpace: \"pre-wrap\",\n          background: \"#f2f2f2\",\n          padding: \"1rem\",\n          borderRadius: \"6px\"\n        },\n        children: analysis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(DataCollection, \"UkEMoqzyKslsRApTavZw/PaJSLo=\");\n_c = DataCollection;\nexport default DataCollection;\nvar _c;\n$RefreshReg$(_c, \"DataCollection\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GEMINI_API_KEY","DataCollection","_s","sources","setSources","analysis","setAnalysis","loading","setLoading","handleInputChange","index","value","updatedSources","addSource","extractMainArticle","url","response","fetch","html","text","tempDiv","document","createElement","innerHTML","article","querySelector","rawText","innerText","cleanText","split","filter","line","trim","length","toLowerCase","includes","join","slice","summarizeWithGemini","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","prompt","res","method","headers","body","JSON","stringify","contents","parts","data","json","candidates","content","handleSelect","selectedUrl","startsWith","alert","articleText","result","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","source","type","onChange","e","target","placeholder","onClick","style","marginTop","whiteSpace","background","padding","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/shreya/rag/rag2/src/components/DataCollection.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./DataCollection.css\";\n\nconst GEMINI_API_KEY = \"AIzaSyCgz-p2aVMhAfPapKiuqpPk5fSU1mczYgI\";\n\nconst DataCollection = () => {\n  const [sources, setSources] = useState([\"\"]);\n  const [analysis, setAnalysis] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleInputChange = (index, value) => {\n    const updatedSources = [...sources];\n    updatedSources[index] = value;\n    setSources(updatedSources);\n  };\n\n  const addSource = () => {\n    setSources([...sources, \"\"]);\n  };\n\n  const extractMainArticle = async (url) => {\n    const response = await fetch(url);\n    const html = await response.text();\n    const tempDiv = document.createElement(\"div\");\n    tempDiv.innerHTML = html;\n\n    const article =\n      tempDiv.querySelector(\"article\") ||\n      tempDiv.querySelector('[class*=\"article\"]') ||\n      tempDiv.querySelector('[class*=\"content\"]');\n\n    const rawText = article ? article.innerText : tempDiv.innerText;\n\n    const cleanText = rawText\n      .split(\"\\n\")\n      .filter(line =>\n        line.trim().length > 40 &&\n        !line.toLowerCase().includes(\"related articles\") &&\n        !line.toLowerCase().includes(\"also read\")\n      )\n      .join(\"\\n\");\n\n    return cleanText.slice(0, 7000);\n  };\n\n  const summarizeWithGemini = async (text) => {\n    const prompt = `\nYou are a professional news risk analyst. Given the following news article, generate a structured report with:\n\n- Headline (short title)\n- Professional Summary (3-5 lines)\n- Authenticity Level (Low, Medium, High)\n- Urgency Level (Low, Medium, High)\n- Impact Scope (e.g., local, state, national, international)\n- Recommendation (action if any)\n\nNews Article:\n\"\"\"${text}\"\"\"\n`;\n\n    const res = await fetch(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          contents: [{ parts: [{ text: prompt }] }],\n        }),\n      }\n    );\n\n    const data = await res.json();\n    return data.candidates?.[0]?.content?.parts?.[0]?.text || \"No response\";\n  };\n\n  const handleSelect = async (index) => {\n    const selectedUrl = sources[index];\n\n    if (!selectedUrl.startsWith(\"https://\")) {\n      alert(\"Please enter a valid URL!\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const articleText = await extractMainArticle(selectedUrl);\n      const result = await summarizeWithGemini(articleText);\n      setAnalysis(result);\n    } catch (error) {\n      alert(\"Error during analysis: \" + error.message);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"data-collection\">\n      <h2 className=\"title\">Early-Warning AI Dashboard</h2>\n      <div className=\"sources-container\">\n        {sources.map((source, index) => (\n          <div key={index} className=\"source-input\">\n            <input\n              type=\"text\"\n              value={source}\n              onChange={(e) => handleInputChange(index, e.target.value)}\n              placeholder={`Enter News URL ${index + 1}`}\n            />\n            <button className=\"select-button\" onClick={() => handleSelect(index)}>\n              Analyze\n            </button>\n          </div>\n        ))}\n        <button className=\"add-source\" onClick={addSource}>\n          + Add New Source\n        </button>\n      </div>\n\n      {loading && <p style={{ marginTop: \"20px\" }}>Analyzing with Gemini AI...</p>}\n\n      {analysis && (\n        <div className=\"analysis-result\">\n          <h3>📊 Gemini Analysis</h3>\n          <pre style={{ whiteSpace: \"pre-wrap\", background: \"#f2f2f2\", padding: \"1rem\", borderRadius: \"6px\" }}>\n            {analysis}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DataCollection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}